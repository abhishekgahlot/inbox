#!/usr/bin/env python
from gevent import monkey; monkey.patch_all()
from gevent import joinall
import argparse
import signal
import sys
from setproctitle import setproctitle; setproctitle('inbox')

from inbox.server.config import config, load_config
from inbox.server.log import configure_general_logging, get_logger
log = get_logger()

def debug(args=None):
    """ Run the server with autoreload. TODO add debug flag to startup."""
    from werkzeug.serving import run_with_reloader
    run_with_reloader(start)

def start(args=None):
    # commit = subprocess.check_output(["git", "describe", "--tags"])
    print """
\033[94m     Welcome to... \033[0m\033[1;95m
      _____       _
     |_   _|     | |
       | |  _ __ | |__   _____  __
       | | | '_ \| '_ \ / _ \ \/ /
      _| |_| | | | |_) | (_) >  <
     |_____|_| |_|_.__/ \___/_/\_\\  \033[0m

     Use CTRL-C to stop.
     """
    from inbox.server.models import init_db
    init_db()

    threads = []

    # Start ZeroRPC api server service
    from inbox.server.util.concurrency import make_zerorpc
    from inbox.server.api import API

    api_srv_loc = config.get('API_SERVER_LOC', None)
    threads.append(make_zerorpc(API, api_srv_loc))

    # Start ZeroRPC mail sync server service
    from inbox.server.mailsync.service import SyncService
    sync_srv_loc = config.get('CRISPIN_SERVER_LOC', None)
    threads.append(make_zerorpc(SyncService, sync_srv_loc))

    # Start ZeroRPC contacts sync service
    from inbox.server.rolodex import ContactSync
    contacts_srv_loc = config.get('ROLODEX_SERVER_LOC', None)
    threads.append(make_zerorpc(ContactSync, contacts_srv_loc))

    # start ZeroRPC search server service
    from inbox.server.search import SearchService
    search_srv_loc = config.get('SEARCH_SERVER_LOC', None)
    threads.append(make_zerorpc(SearchService, search_srv_loc))

    # hang out forever and run some services
    joinall(threads)

def sync(args):
    import zerorpc

    c = zerorpc.Client(timeout=5)
    c.connect("tcp://127.0.0.1:9997")
    try:
        if args.cmd == 'start':
            print c.start_sync(args.account_id, dummy=args.dummy)
        elif args.cmd == 'startall':
            print c.start_sync(dummy=args.dummy)
        elif args.cmd == 'stop':
            print c.stop_sync(args.account_id)
        elif args.cmd == 'stopall':
            print c.stop_sync()
        elif args.cmd == 'status':
            print c.sync_status()
        else:
            print >>sys.stderr, "No such command."
            sys.exit(1)
    except zerorpc.exceptions.TimeoutExpired:
        print >>sys.stderr, "Can't connect to sync service. Is it running? (./inbox start)"
        sys.exit(1)

def stop(args):
    print """
\033[91m     Cleaning up...
\033[0m"""
    # from inbox.server.app import stopserver
    # stopserver()

    print """
\033[91m     Stopped.
\033[0m"""
    # os.system("stty echo")
    sys.exit(0)

def console(args):
    from inbox.server.console import start_console
    start_console(args.email_address)

def search(args):
    import zerorpc
    from inbox.server.models.tables import Namespace

    from inbox.server.models import new_db_session
    db_session = new_db_session()

    namespace = db_session.query(Namespace).filter_by(id=args.namespace).one()

    try:
        c = zerorpc.Client(timeout=5)
        c.connect("tcp://127.0.0.1:9995")

        # XXX print something more useful here, like Subject: To: <snippet>
        # or something
        print c.search(namespace.id, args.query)
    except zerorpc.exceptions.TimeoutExpired:
        print >>sys.stderr, "Can't connect. Is the sync server running? (./inbox start)"
        sys.exit(1)

def index(args):
    from inbox.server.search import gen_search_index
    from inbox.server.models.tables import Namespace
    from inbox.server.models import new_db_session
    db_session = new_db_session()

    if args.namespace:
        gen_search_index(db_session.query(Namespace).get(args.namespace))
    else:
        for namespace in db_session.query(namespace).filter_by(
                namespace_type='root'):
            gen_search_index(namespace)

def auth(args):
    # TODO Auth by email,password for non-OAuth backends
    from inbox.server import oauth, session
    from inbox.server.models import new_db_session, init_db
    from inbox.server.models.tables import ImapAccount
    from sqlalchemy.orm.exc import NoResultFound
    from sqlalchemy.exc import ProgrammingError

    email_address = args.email_address

    init_db()
    db_session = new_db_session()
    try:
        account = db_session.query(ImapAccount).filter_by(
                email_address=email_address).one()
    except NoResultFound:
        parsed_email_address = email_address.split('@')
        if non_oauth_provider(parsed_email_address[1]):
                email_pw_dict = oauth.nonoauth(email_address)
                account = session.make_account_nonoauth(db_session, email_pw_dict)
        else:
            try:
                oauth_response = oauth.oauth(email_address)
            except oauth.OauthError:
                print >>sys.stderr, "Auth failed."
                sys.exit(1)

            account = session.make_account_oauth(db_session, oauth_response)

    print "Success!"
    return account

def non_oauth_provider(domain):
    NON_OAUTH_PROVIDERS = ['yahoo']

    for provider in NON_OAUTH_PROVIDERS:
        if provider in domain:
            return True
    return False

def add(args):
    # Auth User
    account = auth(args)

    # Sync Account, sync server must be running for this
    args.cmd = "start"
    args.account_id = account.id
    args.dummy = None
    sync(args)

def signal_handler(signal, frame):
    stop(None)

def main():
    load_config()
    configure_general_logging()
    signal.signal(signal.SIGINT, signal_handler)

    parser = argparse.ArgumentParser(description="Inbox App")
    subparsers = parser.add_subparsers()

    parser_start = subparsers.add_parser('start')
    parser_start.set_defaults(func=start)

    parser_start = subparsers.add_parser('debug')
    parser_start.set_defaults(func=debug)

    parser_stop = subparsers.add_parser('stop')
    parser_stop.set_defaults(func=stop)

    parser_auth = subparsers.add_parser('auth', description="Auth an email account")
    parser_auth.add_argument('email_address', help="Specify the email account to auth")
    parser_auth.set_defaults(func=auth)

    parser_add = subparsers.add_parser('add', description="Add a new email account")
    parser_add.add_argument('email_address', help='Specify the email account to add')
    parser_add.set_defaults(func=add)

    parser_console = subparsers.add_parser('console', description="REPL for crispin")
    parser_console.add_argument('-e', '--email-address',
            help='Start console with crispin client for a particular user')
    parser_console.set_defaults(func=console)

    parser_sync = subparsers.add_parser('sync', description="Start/stop mail sync")
    parser_sync.add_argument('cmd', help='start or stop')
    parser_sync.add_argument('account_id', help='Account ID of user to sync')
    parser_sync.add_argument('--dummy', action='store_true',
            help="Don't connect to IMAP backend.", default=False)
    parser_sync.set_defaults(func=sync)

    parser_index = subparsers.add_parser('index', description="Index mail")
    parser_index.add_argument('namespace',
            help='id of namespace to index mail')
    parser_index.set_defaults(func=index)

    parser_search = subparsers.add_parser('search', description="Search mail")
    parser_search.add_argument('namespace',
            help='id of namespace to search mail')
    parser_search.add_argument('query', help='Term(s) to search for')
    parser_search.set_defaults(func=search)

    args = parser.parse_args()
    args.func(args)

if __name__=="__main__":
    main()
